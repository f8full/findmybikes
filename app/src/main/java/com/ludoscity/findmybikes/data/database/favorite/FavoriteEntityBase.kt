package com.ludoscity.findmybikes.data.database.favorite

import android.arch.persistence.room.ColumnInfo
import android.arch.persistence.room.Entity
import android.arch.persistence.room.Ignore
import android.arch.persistence.room.PrimaryKey
import android.content.Context
import android.text.Spanned
import com.google.android.gms.maps.model.LatLng
import com.ludoscity.findmybikes.R
import com.ludoscity.findmybikes.utils.Utils

/**
 * Created by F8Full on 2017-12-23. This file is part of #findmybikes
 * A data model class to handle the concept of Favorite and save it using Room
 */

@Entity
abstract class FavoriteEntityBase internal constructor(@field:PrimaryKey
                                                       /*protected*/ var id: String, //TODO: remake protected when favorite refactor is done
                                                       @field:ColumnInfo(name = "default_name")
                                                       /*final*/ val defaultName: String,
                                                       @ColumnInfo(name = "custom_name")
                                                       var customName: String = "",
                                                       @field:ColumnInfo(name = "ui_index")
                                                       var uiIndex: Int,
                                                       @field:ColumnInfo(name = "bike_system_id")
                                                       var bikeSystemId: String) {


    @Ignore //so that Room don't persist it
    private var defaultNameWasSet = false

    abstract val attributions: CharSequence
    abstract fun getLocation(ctx: Context): LatLng

    val isDisplayNameDefault: Boolean
        get() = customName.isEmpty()

    val displayName: String
        get() {
            var toReturn = defaultName

            if (customName.isNotEmpty())
                toReturn = customName

            return toReturn
        }


    //defaultName SHOULD be final. Can't because of Room generated code
    //so I have this tracking mechanism
    //unfortunately can't throw an exception as autogenerated code don't have a way to relay those
    //it fails at compile time Error:(172, 33) error: unreported exception IllegalAccessException; must be caught or declared to be thrown
    /*fun setDefaultName(toSet: String) {
        try {
            if (defaultNameWasSet) {
                throw IllegalAccessException("can't set default name more than once !!")
            } else {
                defaultName = toSet
                defaultNameWasSet = true
            }
        } catch (e: IllegalAccessException) {
            Log.wtf("WTF", "Can't set defaultName more than once !! That's an assert", e)
        }

    }*/

    //TODO: Spanned object is prepped by activity model (it is used in map marker info views,
    //both tables as well as the favorites recyclerview)
    fun getSpannedDisplayName(ctx: Context, favoriteDisplayNameOnly: Boolean): Spanned {

        var toReturn = Utils.fromHtml(String.format(ctx.getString(R.string.favorite_display_name_only_italic),
                defaultName))



        if (!isDisplayNameDefault) {
            toReturn = if (favoriteDisplayNameOnly) {
                Utils.fromHtml(String.format(ctx.getString(R.string.favorite_display_name_only_bold),
                        displayName))
            } else {
                Utils.fromHtml(String.format(ctx.getString(R.string.favorite_display_name_complete),
                        displayName, defaultName))
            }
        }

        return toReturn
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is FavoriteEntityBase) return false

        val that = other as FavoriteEntityBase?

        return id.equals(that!!.id, ignoreCase = true)
    }

    override fun hashCode(): Int {
        return id.hashCode()
    }
}
